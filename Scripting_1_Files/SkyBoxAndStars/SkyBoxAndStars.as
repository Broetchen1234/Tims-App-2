package{		import caurina.transitions.Tweener;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;		import org.papervision3d.cameras.*;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;		import org.papervision3d.materials.special.ParticleMaterial;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.objects.special.ParticleField;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;		//import org.papervision3d.objects.prims2d.*;        [SWF ( backgroundColor="0x000000", frameRate="30")] 	         	public class SkyBoxAndStars extends Sprite	{		private var viewport:			Viewport3D;		private var scene:				Scene3D;		private var camera:				FreeCamera3D;					private var renderer:			BasicRenderEngine;		private var clickMe:            Boolean;				private var particlemat:ParticleMaterial;		private var stars:ParticleField;		private var cone:               Cone;		private var skybox:            Cube;				//Parameters for Keyboard and Cylinders	 	 	     private var speed:Number=1; //Forward Back	     private var rotspeed:Number=2; //Rotation	     private var highspeed:Number=30; //Flying	     private var radius:Number = 800; //Radius	     private var numOfItems:int = 13; //Number of items	     private var anglePer:Number = (Math.PI*2) / numOfItems; //Layout Rotation angle                //Declare Buttons and Boolen Values	     	     private var leftArrow:Boolean = false;	     private var rightArrow:Boolean = false;	     private var upArrow:Boolean = false;		     private var downArrow:Boolean = false;				     private var pageUp:Boolean = false;		     private var pageDown:Boolean = false;	             		//Parameters		public var myWidth:Number=100000;		public var myHeight:Number=100000;		public var myDepth:Number=100000;						//EmbedImages		//images may be too big??				[Embed (source="assets/hot_nebula_0.jpg")]		private var BitmapFront : Class; 		[Embed (source="assets/hot_nebula_270.jpg")]		private var BitmapRight : Class; 		[Embed (source="assets/hot_nebula_180.jpg")]		private var BitmapBack : Class; 		[Embed (source="assets/hot_nebula_90.jpg")]		private var BitmapLeft : Class; 		[Embed (source="assets/hot_nebula_bottom.jpg")]		private var BitmapDown : Class; 		[Embed (source="assets/hot_nebula_top.jpg")]		private var BitmapUp : Class; 										public function SkyBoxAndStars():void		{							//viewport = new BasicRenderEngine(width, height, scaleToStage, interactive);			viewport = new Viewport3D(550, 400, false, true);			addChild(viewport);						//instantiates a Scene3D instance			scene = new Scene3D();						//instantiates a Camera3D instance			camera = new FreeCamera3D();			camera.zoom=100;			//renderer draws the scene to the stage			renderer = new BasicRenderEngine();																	/*			var matFront : BitmapMaterial = new BitmapMaterial(new BitmapFront().bitmapData); 			var matLeft : BitmapMaterial = new BitmapMaterial(new BitmapLeft().bitmapData); 			var matBack : BitmapMaterial = new BitmapMaterial(new BitmapBack().bitmapData); 			var matUp : BitmapMaterial = new BitmapMaterial(new BitmapUp().bitmapData); 			var matRight : BitmapMaterial = new BitmapMaterial(new BitmapRight().bitmapData); 			var matDown : BitmapMaterial = new BitmapMaterial(new BitmapDown().bitmapData); 									// see the cube from the inside!						matFront.doubleSided = true; 			matLeft.doubleSided = true; 			matBack.doubleSided = true; 			matUp.doubleSided = true; 			matRight.doubleSided = true; 			matDown.doubleSided = true; 			*/			// leave var myMat when removing bitmap data			var myMat : MaterialsList = new MaterialsList(); 			/*			myMat.addMaterial(matFront, "front"); 			myMat.addMaterial(matLeft, "left"); 			myMat.addMaterial(matBack, "back"); 			myMat.addMaterial(matUp, "top"); 			myMat.addMaterial(matRight, "right"); 			myMat.addMaterial(matDown, "bottom"); 			*/		    particlemat = new ParticleMaterial(0xffffff,1,ParticleMaterial.SHAPE_CIRCLE);			stars = new ParticleField(particlemat, 300,3, 2000,2000,2000);			scene.addChild(stars);						particlemat = new ParticleMaterial(0xffffff,1,ParticleMaterial.SHAPE_STAR);			stars = new ParticleField(particlemat, 300,3, 2000,2000,2000);			scene.addChild(stars);						particlemat = new ParticleMaterial(0xffffff,1,ParticleMaterial.SHAPE_BURST);			stars = new ParticleField(particlemat, 300,3, 2000,2000,2000);			scene.addChild(stars);						//sphere = new Sphere(material applied to object, radius, wSegments, hSegments);			//leave myMat in skybox			skybox = new Cube(myMat,myWidth,myDepth,myHeight,4,4,4);			scene.addChild(skybox);												camera.z=0;				camera.zoom = 6; 			camera.focus = 100; 												//set up enterFrame event			addEventListener(Event.ENTER_FRAME, onEnterFrame);																			//define enterFrame Method, render the PV3D Scene and animate the primitive			function onEnterFrame(e:Event):void			{							renderer.renderScene(scene, camera, viewport);			camera.yaw((320-mouseX)*-0.004); 			camera.pitch((240-mouseY)*-0.002); 							//Camera Drift			skybox.x=camera.x;			skybox.y=camera.y;			skybox.z=camera.z;					    camera.z += speed*Math.cos(camera.rotationY*Math.PI/180);	        camera.x += speed*Math.sin(camera.rotationY*Math.PI/180);									if((Math.abs(camera.x)-Math.abs(stars.x)>1500)||(Math.abs(camera.z)-Math.abs(stars.z)>1500)){			//stars.x=camera.x;						var myCamX:Number=camera.x;						Tweener.addTween(stars, {x:myCamX, time:10, transition:"linear"});						var myCamZ:Number=camera.z;						Tweener.addTween(stars, {z:myCamZ, time:10, transition:"linear"});			}														}		}														}}//And all thy children shall be taught of the LORD; and great shall be the peace of thy children.